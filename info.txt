[MOOC] SW프로그래밍 역량인증시험 개념완성 Part1. (3/25 ~ 4/19)
[MOOC] SW프로그래밍 역량인증시험 기출문제 해설 2024 (4/20 ~ 6/9, 7/6~9/1)
[MOOC] SW프로그래밍 역량인증시험 개념완성 Part2. (6/10 ~ 7/5)
[LIVE] [L3]SW프로그래밍 역량인증시험 실전 문제풀이 (9/2 ~ 9/6)


Binary Search	https://leetcode.com/tag/binary-search
Two Pointers	https://leetcode.com/tag/two-pointers/
Sliding Window	https://leetcode.com/tag/sliding-window/
Depth-First Search (DFS)	https://leetcode.com/tag/depth-first-search
Breadth-First Search (BFS)	https://leetcode.com/tag/breadth-first-search/
Monotonic Stack	https://leetcode.com/tag/monotonic-stack
Union Find(=Disjoint Set)	https://leetcode.com/tag/union-find
Topological Sort	https://leetcode.com/tag/topological-sort



잘못된 공부 방법

1) 문제 유형을 외운다고, 똑같은 문제가 나오지 않는다.

 - 합격한 사람들의 말을 들어 보면, 백준 알고리즘에서 봤던 문제가 이번에 나와서 운좋게 붙었습니다란 말을 심심치 않게 들었다.

   그래서, 백준에 있는 문제 유형을 정말 달달 외웠는데, 똑같은 문제는 안나오더라

 - 여기서 느꼇다. 고등학교때 수학 공식을 외울때, 해당 공식이 들어간 문제를 다 외운다고, 시험에 똑같은 문제가 나오지 않는다는 것이다.

   어떻게 보면 당연한 이치인데, 두 번 시험을 치루고서 느꼇다.

   그래서 공부 방법을 바꿔 보기로 한다. 공식은 외운다. 하지만 문제는 풀어 보면서 어떤 공식을 대입 할 것인지 응용력을 키우는 것이다.

집중력의 한계

백준 알고리즘이나 기출 문제를 풀어 보면서 느꼇다. 집중력이 떨어 진다.

문제를 읽고 이해가 갔다. 어느 정도 풀이과정이 생각나서 종이에 적어 가며 정리하다 마지막 20%쯤 남았을 때, 집중력이 흐트러 지면서 마무리를 못짓고 딴짓을 하고 있는 나를 발견..

문제를 보고 이건 bfs or dp 로 풀어야지 라고 도출하고 코드를 작성하다...마무리 단계에서 이정도면 공부 끝 이러면서 관둬 버린다.

이 버릇 못 고치면 다음 시험도 장담 할 수 없다.

Flood Fill
그래프
기출문제
동적 프로그래밍
백트레킹
소수판별하기
올림피아 초등부
재귀호출
정렬
최단거리
탐색
탐욕알고리즘(Greedy)
파이썬 기본 라이브러리 활용


브루트 포스: 단순 무식하게 모든 경우의 수를 검사하여 최적의 조건을 찾음

백트래킹: 모든 경우를 탐색하는 방법을 제공하는 알고리즘. dfs 이용, ex) 퀀 배치 갯수, 스도쿠

동적계획법(DP): 규칙을 알아내서 점화식을 도출하는 것. 이전 계산한 값을 저장하여 재사용. 규칙을 알아내기가 어렵지만 관건

그리디 알고리즘: 지금 이 순간 당장 최적인 답을 선택하여 적합한 결과를 도출하는 알고리즘. 그리디 알고리즘을 사용하면 매 선택이 그 순간에 대해서는 최적이지만 그걸 종합적으로 봤을 땐 최적이라는 보장은 절대 없다는 것을 명심해야 한다. 필요 시 sorting 고려

스택: 원소를 무조건 쌓아가다가 크거나 작거나 하는 조건에 걸리면 조건이 참일 때까지 pop 수행 ex) 히스토그램(6549), 오큰수(17298)

큐,덱: 

분할 정복(Divide and Conquer): 그대로 해결할 수 없는 문제를 작은 문제로 분할하여 문제를 해결하는 방법이나 알고리즘이다. ex) 색종이 나누기

이분 탐색(binary serach): low, high를 설정 후 중간값 mid 값을 정한 후 조건에 따라 low = mid + 1, high = mid - 1 씩 조정해 가면서 best mid값을 찾는 방식. ex) 랜선 자르기, 나무 자르기

우선순위 큐

DFS, BFS

투 포인터

트리





# 코딩 테스트를 준비하며 반드시 알아야 하는 라이브버리는 6가지

내장함수 : print(), input()과 같은 기본 입출력 기능부터 sorted()와 같은 정렬 기능을 포함하고 있는 기본 내장 라이브러리
itertools : 파이썬에서 반복되는 형태의 데이터를 처리하는 기능을 제공하는 라이브러리, 순열과 조합 라이브러리를 제공
heapq : 힙(Heap) 기능을 제공하는 라이브러리. 우선순위 큐 기능을 구현하기 위해 사용한다.
collections : 덱(deque), 카운터(Counter) 등의 유용한 자료구조를 포함하고 있는 라이브러리이다.
math : 필수적인 수학적 기능을 제공하는 라이브러리이다. 팩토리얼, 제곱근, 최대공약수, 삼각함수 
	관련 메서드부터 파이(pi)와 같은 상수를 포함하고 있다.

[표준 라이브러리]
permutations # 모든 순열 구하기
combinations # 2개를 뽑는 모든 조합 구하기
product # 2개를 뽑는 모든 순열 구하기(중복 허용)
combination_with_replacement # 2개를 뽑는 모든 조합 구하기(중복 허용)



문제 잘 읽기
TC 조건
X, Y축 확인해보기
...
적용할 전략&알고리즘 정하기
잘 안풀린다면 정 반대의 사고 or 전략 생각해보기
최소 상자개수 구하기: 상자를 추가 → 큰 범위에서 상자를 제거
각 건물에서 볼 수 있는 건물 수 → 각 건물이 보일 수 있는 건물 수
귀납법도 고민해보기 (예시, fibo)
DP → 표 그려보기



시험은 총 3 문제로 구성되며



배점이 아래와 같이 이뤄지기 때문에 70점 이상 획득하시려면 반드시 3번 문제는 푸셔야 합니다.



1. 30

2. 30

3. 40



1번 문제는 코드를 이해하고 약간의 코드를 수정하는 문제이기 때문에 복잡하게 접근하시면 안 되는 매우 간단한 문제입니다.



실제 2번 3번이 알고리즘 문제라고 보시면 되며, 시험 보시기 전에 반드시 MOOC 기출 문제 강좌를 수강 하시기를 적극 추천 드립니다.

1. DP (Dynamic Programming)

2. Greedy Algorithm

3. DFS / BFS



위 알고리즘 관련 문제들이 가장 많이 나오고 있으니, 만약 위 알고리즘들에 익숙치 않으시다면, 반드시 미리 학습하시고 시험을 보시기 바랍니다.



2번 3번 알고리즘 문제는 성능도 함께 평가되므로, 모든 Test Case를 통과하시려면 성능도 반드시 고려되어야 합니다.




역량 인증 시험 공부하실 때 유형 잡고 가시면 좋을 것 같습니다 (smile) 

간략히 어떤 종류가 있는지와 팁 정도로만 정리하였습니다 참고해 주세요~

추가로 넣으실 내용이나 수정 사항이 있다면 언제든 추가 해주세요! 

BFS, DP
Binary search
CPP STL - algorithm sort, search
CPP STL - stack, queue, deque
CPP STL - vector, string, pair
DFS
Sliding window
그리디
자료구조

Python3.9 (3.9.6)
• PyPy3.7 (7.3.5)

배열
스택
큐
정렬과 이분검색
분할정복
그리디
BFS
DFS
Flood Fill	

조건문/제어문/배열/method 활용 코드 구현, 함수 구현
Python 특화: Container, Built-in 함수, iterator, comprehension 활용

선수과정
[MOOC] SW프로그래밍 역량인증시험 개념완성 (2024-03-25	2024-04-19)
Part1. 필수 자료구조 이론 + 기본 수준 문제풀이
6유형 아이디어성: 대표적인 6개 유형의 아이디어성 기본 문제 및 응용 문제
스택/ 큐: 스택 및 큐 자료구조 이론 이해, 스택 및 큐를 활용한 기본 문제 및 응용 문제
정렬/ 이진탐색: 정렬 / 이진 탐색 이론 이해, 정렬 라이브러리, 정렬 / 이진 탐색 기반 기본 문제 및 응용 문제
종합문제: 실제 시험과 유사한 수준의 아이디어성 및 자료구조 기반 문제해결 유형의 종합 연습 문제

Part2. 필수 알고리즘 이론 + 기본 수준 문제풀이 (2024-06-10	2024-07-05)
BFS: BFS 알고리즘의 특징 및 구현 방법 이해, BFS 기본 문제 및 응용 문제
DFS: DFS 알고리즘의 특징 및 구현 방법 이해, DFS 기본 문제 및 응용 문제
Flood Fill: Flood Fill 알고리즘의 특징 및 구현 방법 이해, 기본 문제 및 응용 문제
종합문제: 실제 시험과 유사한 수준의 아이디어성 및 자료구조 기반 문제해결 유형의 종합 연습 문제

후속과정
[MOOC] SW프로그래밍 역량인증시험 기출문제 해설 2024
시험 기출 문제 풀이 및 연습
문제 해설 동영상 강의
과정 시작부터 24년 12월까지 수강 하실 수 있습니다.


[LIVE] [L3]SW프로그래밍 역량인증시험 실전 문제풀이 (2024-09-02	2024-09-06)
자료구조/알고리즘 이론 강의 없이 실전/심화 문제 풀이 및 코드 리뷰 중심
본 과정은 이론 수업 없이 실전 문제 풀이와 강사의 코드 리뷰 형식으로만 진행됩니다.
필수 자료구조, 필수 알고리즘의 이론 지식이 없을 경우 과정 수강이 어렵습니다.
역량인증시험 점수 50점 이상 자만 수강 가능합니다. (수강 시작일 기준 한달 전  점수)
선수과정 : [MOOC] SW프로그래밍 역량인증시험 개념완성

1~4일 
실전 대비 문제 
아이디어성, 다양한 자료구조, 알고리즘 유형이 혼합된 실전 문제를 해결 

5일 
실전 모의 고사 
실제 시험과 유사한 수준의 모의고사 및 과정 평가 진행
5일차에 역량인증 시험 참여자의 경우 과정 평가를 역량인증 시험으로 대체 가능